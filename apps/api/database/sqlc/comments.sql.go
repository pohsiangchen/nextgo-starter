// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package sqlcstore

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  content, user_id, post_id
) VALUES (
  $1, $2, $3
)
RETURNING id, content, user_id, post_id, updated_at, created_at
`

type CreateCommentParams struct {
	Content sql.NullString
	UserID  int64
	PostID  int64
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Content, arg.UserID, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.PostID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, content, user_id, post_id, updated_at, created_at FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.PostID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsByPostId = `-- name: ListCommentsByPostId :many
SELECT users.username, comments.id, comments.content, comments.user_id, comments.post_id, comments.updated_at, comments.created_at
FROM comments
JOIN users ON users.id = comments.user_id
WHERE comments.post_id = $1 AND comments.id < $2
ORDER BY comments.id DESC
LIMIT $3
`

type ListCommentsByPostIdParams struct {
	PostID         int64
	LastCommentsID int64
	Limit          int32
}

type ListCommentsByPostIdRow struct {
	Username string
	Comment  Comment
}

func (q *Queries) ListCommentsByPostId(ctx context.Context, arg ListCommentsByPostIdParams) ([]ListCommentsByPostIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByPostId, arg.PostID, arg.LastCommentsID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCommentsByPostIdRow
	for rows.Next() {
		var i ListCommentsByPostIdRow
		if err := rows.Scan(
			&i.Username,
			&i.Comment.ID,
			&i.Comment.Content,
			&i.Comment.UserID,
			&i.Comment.PostID,
			&i.Comment.UpdatedAt,
			&i.Comment.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = coalesce($1, content)
WHERE id = $2
RETURNING id, content, user_id, post_id, updated_at, created_at
`

type UpdateCommentParams struct {
	Content sql.NullString
	ID      int64
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.Content, arg.ID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.PostID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
