// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package sqlcstore

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  title, content, user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, title, content, user_id, updated_at, created_at
`

type CreatePostParams struct {
	Title   sql.NullString
	Content sql.NullString
	UserID  int64
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Content, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, user_id, updated_at, created_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listFeedsByUserId = `-- name: ListFeedsByUserId :many
SELECT u.username, p.id, p.title, p.content, p.user_id, p.updated_at, p.created_at, COUNT(c.id) AS comments_count
FROM posts p 
LEFT JOIN "comments" c ON c.post_id = p.id 
LEFT JOIN users u ON u.id = p.user_id 
JOIN follows f ON f.followed_user_id = p.user_id
WHERE f.following_user_id = $1 AND p.id < $2
GROUP BY u.id, p.id
ORDER BY p.id DESC
LIMIT $3
`

type ListFeedsByUserIdParams struct {
	FollowingUserID int64
	LastPostsID     int64
	Limit           int32
}

type ListFeedsByUserIdRow struct {
	Username      sql.NullString
	Post          Post
	CommentsCount int64
}

func (q *Queries) ListFeedsByUserId(ctx context.Context, arg ListFeedsByUserIdParams) ([]ListFeedsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedsByUserId, arg.FollowingUserID, arg.LastPostsID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsByUserIdRow
	for rows.Next() {
		var i ListFeedsByUserIdRow
		if err := rows.Scan(
			&i.Username,
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Content,
			&i.Post.UserID,
			&i.Post.UpdatedAt,
			&i.Post.CreatedAt,
			&i.CommentsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = coalesce($1, title),
content = coalesce($2, content)
WHERE id = $3
RETURNING id, title, content, user_id, updated_at, created_at
`

type UpdatePostParams struct {
	Title   sql.NullString
	Content sql.NullString
	ID      int64
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.Title, arg.Content, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
